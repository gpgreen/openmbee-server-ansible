# Ansible playbook to drop, create, restore Alfresco db
#
# NOTE THIS PLAYBOOK IS DANGEROUS AS IT DELETES ALL DATA
# FROM AN Open-MBEE INSTALLATION TO RESTORE A BACKUP
#
# Author: Greg Green <gregory.p.green@boeing.com>

- hosts: db-servers
  vars:
    use_local_backup: True
    backup_date: 2017-02-21
    alfresco_index_backup_file: "{{ backup_date }}.tar.bz2"
    postgresql_backup_file: alfresco.gz
    postgresql_backup_file_noext: alfresco
    mms_backup_file: mms.gz
    mms_backup_file_noext: mms
  tasks:

  - include: roles/backups/tasks/cron_entries.yml what_state=absent
    
  - name: stop alfresco
    command: systemctl stop tomcat-openmbee
    become: yes

  - name: drop db's
    postgresql_db: name={{ item }} state=absent port={{ postgresql_db_port }}
    become: yes
    become_user: postgres
    with_items:
      - "{{ alfresco_postgres_db }}"
      - "{{ mms_postgres_db }}"

  - name: add alfresco db
    postgresql_db: name={{ alfresco_postgres_db }} encoding='UTF-8' lc_collate='en_US.UTF-8' lc_ctype='en_US.UTF-8' template='template0' state=present port={{ postgresql_db_port }}
    become: yes
    become_user: postgres

  - name: add alfresco user to db
    postgresql_user: db={{ alfresco_postgres_db }} name={{ alfresco_postgres_user }} password={{ alfresco_postgres_password }} role_attr_flags=LOGIN priv=ALL state=present port={{ postgresql_db_port }}
    become: yes
    become_user: postgres

  - name: add mms db
    postgresql_db: name={{ mms_postgres_db }} encoding='UTF-8' lc_collate='en_US.UTF-8' lc_ctype='en_US.UTF-8' template='template0' state=present port={{ postgresql_db_port }}
    become: yes
    become_user: postgres

  - name: add mmsuser to db
    postgresql_user: db={{ mms_postgres_db }} name={{ mms_postgres_user }} password={{ mms_postgres_password }} role_attr_flags=LOGIN priv=ALL state=present port={{ postgresql_db_port }}
    become: yes
    become_user: postgres

  - name: copy mms.sql
    copy: src=roles/postgresql/files/mms-2.3.1.sql dest=/usr/src mode=0644
    become: yes

  - name: run mms.sql
    shell: "{{ postgresql_install_dir }}/bin/psql --port={{ postgresql_db_port }} -U {{ mms_postgres_user }} -f /usr/src/mms-2.3.1.sql postgres && touch {{ postgresql_data_dir }}/mms-initialized && chmod 0640 {{ postgresql_data_dir }}/mms-initialized"
    become: yes
    become_user: postgres

  - name: create directory for backup files
    file: path={{ top_data_dir }}/tmp state=directory owner=root group=root mode=0755
    become: yes

  - set_fact: ddir={{ top_data_dir}}/tmp
  
  - name: copy postgresql data from controller
    copy: src={{ postgresql_backup_file }} dest={{ ddir }}
    become: yes
    when: use_local_backup == False

  - name: extract postgresql data
    command: gunzip {{ ddir }}/{{ postgresql_backup_file }} 
      creates={{ ddir }}/{{ postgresql_backup_file_noext }}
    become: yes
    when: use_local_backup == False

  - name: extract postgresql data from local backup
    shell: gunzip -c {{ postgresql_backup_dir }}/{{ backup_date }}/{{ postgresql_backup_file }} > {{ ddir }}/{{ postgresql_backup_file_noext }}
    become: yes
    when: use_local_backup == True

  - name: fix permissions on postgresql data
    file: path={{ ddir }}/{{ postgresql_backup_file_noext }} owner=postgres group=root mode=0640
    become: yes

  - name: insert postgresql data
    command: "{{ postgresql_install_dir }}/bin/psql --file {{ ddir }}/{{ postgresql_backup_file_noext }} --port {{ postgresql_db_port }} {{ alfresco_postgres_db }}"
    become: yes
    become_user: postgres

###################################

  - name: copy mms data from controller
    copy: src={{ mms_backup_file }} dest={{ ddir }}
    become: yes
    when: use_local_backup == False

  - name: extract mms data
    command: gunzip {{ ddir }}/{{ mms_backup_file }} 
      creates={{ ddir }}/{{ mms_backup_file_noext }}
    become: yes
    when: use_local_backup == False

  - name: extract mms data from local backup
    shell: gunzip -c {{ postgresql_backup_dir }}/{{ backup_date }}/{{ mms_backup_file }} > {{ ddir }}/{{ mms_backup_file_noext }}
    become: yes
    when: use_local_backup == True

  - name: fix permissions on mms data
    file: path={{ ddir }}/{{ mms_backup_file_noext }} owner=postgres group=root mode=0640
    become: yes

  - name: insert mms data
    command: "{{ postgresql_install_dir }}/bin/psql --file {{ ddir }}/{{ mms_backup_file_noext }} --port {{ postgresql_db_port }} {{ mms_postgres_db }}"
    become: yes
    become_user: postgres

###################################

  - name: copy alfresco data from controller
    copy: src={{ alfresco_index_backup_file }} dest={{ ddir }}
    become: yes
    when: use_local_backup == False

  - name: copy alfresco data from backup
    command:  cp {{ alfresco_backup_dir }}/{{ alfresco_index_backup_file }} {{ ddir }}
      creates={{ ddir }}/{{ alfresco_index_backup_file }}
    become: yes
    when: use_local_backup == True

  - name: fix permissions on alfresco data
    file: path={{ ddir }}/{{ alfresco_index_backup_file }} owner=openmbee group=root mode=0640
    become: yes

  - name: remove alfresco directories
    file: state=absent path={{ alfresco_data_dir }}/{{ item }}
    become: yes
    with_items:
      - backup-lucene-indexes
      - contentstore
      - contentstore.deleted
      - keystore
      - lucene-indexes

  - name: restore alfresco data
    command: "tar xjf {{ ddir }}/{{ alfresco_index_backup_file }} -C {{ alfresco_data_dir }}"
    become: yes
    become_user: openmbee

  - name: check for backup indexes, won't be there if server hasn't been run
    stat: path="{{ alfresco_data_dir }}/backup-lucene-indexes"
    register: bli
    become: yes

  - name: change backup-lucene-indexes to lucene-indexes
    command: mv backup-lucene-indexes lucene-indexes chdir={{ alfresco_data_dir }}
    become: yes
    when: bli.stat.exists

  - name: clean tomcat stuff
    command: "{{ tomcat_dir }}/bin/clean_tomcat.sh"
    become: yes

  - name: start alfresco
    command: systemctl start tomcat-openmbee
    become: yes

  - name: cleanup files
    file: path={{ ddir }} state=absent
    become: yes

  - include: roles/backups/tasks/cron_entries.yml what_state=present
    
